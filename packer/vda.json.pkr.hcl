//Converted HCL for updated format

variable "client_id" {
  type    = string
  default = "${env("client_id")}"
}

variable "client_secret" {
  type    = string
  default = "${env("client_secret")}"
}

variable "location" {
  type    = string
  default = "${env("location")}"
}

variable "media_container" {
  type    = string
  default = "${env("media_container")}"
}

variable "rg_name" {
  type    = string
  default = "${env("rg_name")}"
}

variable "sakey" {
  type    = string
  default = "${env("sa_key")}"
}

variable "storage_account" {
  type    = string
  default = "${env("storage_account")}"
}

variable "subid" {
  type    = string
  default = "${env("subid")}"
}

variable "tenantid" {
  type    = string
  default = "${env("tenantid")}"
}

variable "vda" {
  type    = string
  default = "${env("vda")}"
}

variable "vdacontrollers" {
  type    = string
  default = "${env("vdacontrollers")}"
}

variable "winver" {
  type    = string
  default = "${env("winver")}"
}

source "azure-arm" "autogenerated_1" {
  capture_container_name = "goldimages"
  capture_name_prefix    = "ctxvda"
  client_id              = "${var.client_id}"
  client_secret          = "${var.client_secret}"
  communicator           = "winrm"
  image_offer            = "WindowsServer"
  image_publisher        = "MicrosoftWindowsServer"
  image_sku              = "${var.winver}"
  location               = "${var.location}"
  os_type                = "Windows"
  resource_group_name    = "${var.rg_name}"
  storage_account        = "${var.storage_account}"
  subscription_id        = "${var.subid}"
  tenant_id              = "${var.tenantid}"
  vm_size                = "Standard_DS2_v2"
  winrm_insecure         = true
  winrm_timeout          = "3m"
  winrm_use_ssl          = true
  winrm_username         = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "powershell" {
    inline = ["iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))"]
  }

  provisioner "ansible" {
    extra_arguments = ["--extra-vars", "ansible_winrm_server_cert_validation=ignore", "--extra-vars", "ansible_shell_type=powershell", "--extra-vars", "ansible_shell_executable=None", "-vvv", "--extra-vars", "winrm_password={{ .WinRMPassword }}"]
    playbook_file   = "${path.root}/ansible/base.yml"
    use_proxy       = false
    user            = "packer"
  }

  provisioner "windows-restart" {
  }

  provisioner "powershell" {
    environment_vars = ["vda=${var.vda}", "vdacontrollers=${var.vdacontroller}", "sakey=${var.sakey}", "sacontainer=${var.media_container}", "storage_account=${var.storage_account}"]
    script           = "${path.root}/scripts/ctxvda.ps1"
  }

  provisioner "windows-restart" {
  }

  provisioner "powershell" {
    environment_vars = ["vda=${var.vda}", "vdacontrollers=${var.vdacontroller}", "sakey=${var.sakey}", "sacontainer=${var.media_container}", "storage_account=${var.storage_account}"]
    script           = "${path.root}/scripts/ctxvda.ps1"
  }

  provisioner "windows-restart" {
  }

  provisioner "powershell" {
    environment_vars = ["sakey=${var.sakey}", "sacontainer=${var.media_container}", "storage_account=${var.storage_account}"]
    script           = "${path.root}/scripts/ctxoptimizer.ps1"
  }

  provisioner "powershell" {
    inline = ["get-hotfix|Select-Object description,hotfixid,caption|sort-object HotFixID|ConvertTo-Json|Out-File 'c:\\windows\\temp\\hotfix.json' -force"]
  }

  provisioner "file" {
    destination = "./hotfix.json"
    direction   = "download"
    source      = "c:\\windows\\temp\\hotfix.json"
  }

  provisioner "powershell" {
    inline = ["get-package|Select-Object Name,Version,Source,ProviderName|sort-object Name|ConvertTo-Json|Out-File 'c:\\windows\\temp\\package.json' -force"]
  }

  provisioner "file" {
    destination = "./package.json"
    direction   = "download"
    source      = "c:\\windows\\temp\\package.json"
  }

  provisioner "inspec" {
    inspec_env_vars = ["CHEF_LICENSE=accept"]
    profile         = "./inspec/basic_validation"
  }

  post-processor "manifest" {
    output = "manifest.json"
  }
}
